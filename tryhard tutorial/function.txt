Function Declaration: syntax:
- Bracers must not exist
- Have semi-colon

	<return type> func_name(<param Type> paramName_maynotExist, ...);

Declaration:
	void func_no_param();

	int func_with_two_param(int* param1, int param2);

	float func_with_no_name(double, int, float);

Tips:
- Declaration parameters name is optional,
- in some projects, parameters name is important to represent which parameters coorrespond to which
- in some projects, not writing parameters name is to hidden from users


-------------------------------------------------------------------------


Function Definition syntax:
- Bracers must exist to indicate that it’s a definition
- Parameters name must exist, obviously, or else how are you going to represent that parameter type?
- No semi-colon
 
	<return type> func_name(<param Type> paramName_must_exist, ...)
	{
		return <return type>;
		//return; in the case of type <void>
	}

Definition:

	void func_no_param()
	{

	}


	int func_with_two_param(int param1, int param2)
	{
		return 1;
	}


	float func_with_two_param(int param1, int param2)
	{
		return 1.0f;
	}


	float func_with_two_param(int* param1, int param2)
	{
		return 1.0f;
	}

-------------------------------------------------------------------------

Tips:
- In practice, try to keep 1 function with only 1 purpose
- function is used to unify similiar codes and for easy maintainence
- Is used to compute hidden things from users who have no access to the definition
- Keep in mind function calls is considered an expensive operations if you learn assembly, you know what I mean, but do not let this weight you down

